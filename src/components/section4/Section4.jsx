import { DevToLogo, Wrench, CompassTool, Nut, MicrosoftTeamsLogo, Crown, ChatsCircle, Barbell } from "@phosphor-icons/react";
import { Col, Row, Tooltip, Typography } from "antd";
import React from "react";
import { useEffect } from "react";

import './style.css'

import { useTranslation } from 'react-i18next';


const Section4 = ({ animate }) => {
    const { t } = useTranslation()

    const data = [
        {
            item: 'HTML',
            path: 'M 9 7 L 12 41 L 26 45 L 40 41 C 41 29.667 42 18.333 43 7 L 9 7 z M 11.183594 9 L 40.816406 9 L 38.128906 39.455078 L 26 42.919922 L 13.871094 39.455078 L 11.183594 9 z M 18.550781 15 L 17.589844 27 L 30.580078 27 L 30.169922 32 L 26 32.619141 L 21.880859 32 L 21.699219 30 L 17.839844 30 L 18.230469 35 L 25.990234 37 L 33.759766 35 L 34.75 23 L 22.089844 23 L 22.410156 19 L 30.769531 19 L 31 21 L 34.699219 21 L 34 15 L 18.550781 15 z',
            background: '#fc8c03',
            fill: 'white'
        },
        {
            item: 'CSS',
            path: 'M 39 40 L 25 44 L 11 40 L 8 6 L 42 6 C 41 17.332031 40 28.667969 39 40 Z M 39.816406 8 L 10.183594 8 L 12.871094 38.453125 L 25 41.921875 L 37.128906 38.453125 Z M 16.800781 28 L 20.800781 28 L 20.898438 30.5 L 25 31.898438 L 29.101563 30.5 L 29.398438 26 L 20.601563 26 L 20.398438 22 L 29.601563 22 L 29.898438 18 L 16.101563 18 L 15.800781 14 L 34.101563 14 L 33.601563 22 L 32.898438 33.5 L 25 36.101563 L 17.101563 33.5 Z',
            background: '#2774ab',
            fill: 'white'
        },
        {
            item: 'JavaScript',
            path: 'M 6.667969 4 C 5.207031 4 4 5.207031 4 6.667969 L 4 43.332031 C 4 44.792969 5.207031 46 6.667969 46 L 43.332031 46 C 44.792969 46 46 44.796875 46 43.332031 L 46 6.667969 C 46 5.207031 44.796875 4 43.332031 4 Z M 6.667969 6 L 43.332031 6 C 43.703125 6 44 6.296875 44 6.667969 L 44 43.332031 C 44 43.703125 43.703125 44 43.332031 44 L 6.667969 44 C 6.296875 44 6 43.703125 6 43.332031 L 6 6.667969 C 6 6.296875 6.296875 6 6.667969 6 Z M 23 23 L 23 35.574219 C 23 37.503906 22.269531 38 21 38 C 19.671875 38 18.75 37.171875 18.140625 36.097656 L 15 38 C 15.910156 39.925781 18.140625 42 21.234375 42 C 24.65625 42 27 40.179688 27 36.183594 L 27 23 Z M 35.453125 23 C 32.046875 23 29.863281 25.179688 29.863281 28.042969 C 29.863281 31.148438 31.695313 32.617188 34.449219 33.789063 L 35.402344 34.199219 C 37.140625 34.960938 38 35.425781 38 36.734375 C 38 37.824219 37.171875 38.613281 35.589844 38.613281 C 33.707031 38.613281 32.816406 37.335938 32 36 L 29 38 C 30.121094 40.214844 32.132813 42 35.675781 42 C 39.300781 42 42 40.117188 42 36.683594 C 42 33.496094 40.171875 32.078125 36.925781 30.6875 L 35.972656 30.28125 C 34.335938 29.570313 33.625 29.109375 33.625 27.964844 C 33.625 27.039063 34.335938 26.328125 35.453125 26.328125 C 36.550781 26.328125 37.253906 26.792969 37.90625 27.964844 L 40.878906 26.058594 C 39.625 23.84375 37.878906 23 35.453125 23 Z',
            background: '#f7dd11',
            fill: 'white'
        },
        {
            item: 'ReactJS',
            path: 'M 34.564453 3.9765625 C 33.784805 3.9499025 32.968558 4.0848602 32.150391 4.3496094 C 30.514055 4.8791078 28.800795 5.913028 27.041016 7.34375 C 26.347573 7.9075278 25.647447 8.5517926 24.945312 9.2363281 C 24.263704 8.574435 23.583317 7.9501179 22.910156 7.4023438 C 21.1517 5.9714272 19.439452 4.9382375 17.806641 4.4082031 C 16.990235 4.1431859 16.17716 4.0057926 15.400391 4.03125 C 14.623622 4.056707 13.884159 4.2441704 13.216797 4.6289062 C 13.216267 4.629175 13.213291 4.6306794 13.212891 4.6308594 C 13.21216 4.6312308 13.205078 4.6347556 13.205078 4.6347656 C 13.205062 4.634775 13.194728 4.6434605 13.193359 4.6445312 C 11.87114 5.4166971 11.079224 6.8245635 10.722656 8.4941406 C 10.36422 10.172468 10.400658 12.170324 10.759766 14.408203 C 10.903583 15.30444 11.114042 16.248433 11.361328 17.214844 C 10.565578 17.453413 9.794005 17.705532 9.0800781 17.984375 C 7.0079817 18.793688 5.2934468 19.761913 4.0449219 20.914062 C 2.7963969 22.066212 1.9902344 23.464554 1.9902344 25 C 1.9902344 26.535446 2.7963969 27.933787 4.0449219 29.085938 C 5.2934468 30.238087 7.0079817 31.206312 9.0800781 32.015625 C 9.7852165 32.291036 10.547018 32.539249 11.332031 32.775391 C 11.08408 33.742943 10.872971 34.688439 10.728516 35.585938 C 10.367905 37.8264 10.327615 39.82647 10.685547 41.509766 C 11.04348 43.193061 11.843313 44.615102 13.183594 45.390625 C 14.523623 46.166191 16.152786 46.150573 17.789062 45.621094 C 19.425341 45.091615 21.138601 44.059557 22.898438 42.628906 C 23.5855 42.070362 24.280909 41.433283 24.976562 40.755859 C 25.670427 41.431451 26.363722 42.067526 27.048828 42.625 C 28.807352 44.055919 30.517443 45.087159 32.150391 45.617188 C 33.781115 46.146493 35.402437 46.164648 36.736328 45.398438 C 36.736328 45.398438 36.738281 45.396484 36.738281 45.396484 C 36.739781 45.39567 36.740787 45.39728 36.742188 45.396484 L 36.746094 45.394531 C 36.746094 45.394531 36.748047 45.392578 36.748047 45.392578 L 36.751953 45.390625 L 36.775391 45.376953 L 36.857422 45.330078 L 36.890625 45.294922 C 38.134601 44.508047 38.891662 43.147057 39.236328 41.533203 C 39.594764 39.854876 39.556371 37.85702 39.197266 35.619141 C 39.052761 34.718621 38.840755 33.770158 38.591797 32.798828 C 39.404581 32.556445 40.192089 32.2999 40.919922 32.015625 C 42.992018 31.206312 44.706553 30.238087 45.955078 29.085938 C 47.203603 27.933788 48.009766 26.535446 48.009766 25 C 48.009766 23.464554 47.203603 22.066213 45.955078 20.914062 C 44.706553 19.761913 42.992018 18.793688 40.919922 17.984375 C 40.195605 17.701473 39.411988 17.4465 38.603516 17.205078 C 38.852874 16.233897 39.065975 15.285416 39.210938 14.384766 C 39.571548 12.144303 39.611837 10.144233 39.253906 8.4609375 C 38.896026 6.7775947 38.09614 5.3556007 36.755859 4.5800781 C 36.085753 4.1923363 35.344101 4.0032229 34.564453 3.9765625 z M 34.470703 6.0097656 C 34.959672 6.0236126 35.377482 6.1411481 35.734375 6.3476562 C 36.448094 6.7606338 36.974855 7.5632489 37.255859 8.8847656 C 37.536864 10.206282 37.528456 11.990759 37.195312 14.060547 C 37.062192 14.887622 36.864588 15.770905 36.630859 16.679688 C 34.701845 16.220706 32.599462 15.874326 30.365234 15.660156 C 29.066839 13.82361 27.72374 12.160821 26.371094 10.699219 C 27.032289 10.053327 27.689073 9.4488796 28.330078 8.9277344 C 29.955549 7.6062064 31.495445 6.710361 32.779297 6.2949219 C 33.421223 6.0872023 33.981734 5.9959183 34.470703 6.0097656 z M 15.490234 6.0234375 C 15.982704 6.0101135 16.545281 6.1014395 17.189453 6.3105469 C 18.477798 6.7287625 20.021269 7.6290416 21.648438 8.953125 C 22.270986 9.4597147 22.907401 10.045837 23.548828 10.669922 C 22.187983 12.142398 20.838331 13.818645 19.533203 15.669922 C 17.308155 15.887573 15.214777 16.236484 13.294922 16.697266 C 13.062989 15.792357 12.866576 14.913692 12.734375 14.089844 C 12.402107 12.019223 12.395014 10.233954 12.677734 8.9101562 C 12.960455 7.5863586 13.490189 6.780747 14.210938 6.3652344 L 14.214844 6.3632812 C 14.575231 6.1555171 14.997765 6.0367613 15.490234 6.0234375 z M 24.976562 12.138672 C 25.904382 13.148338 26.834751 14.25861 27.751953 15.470703 C 26.847876 15.427613 25.93357 15.398437 25 15.398438 C 24.050175 15.398438 23.120414 15.428072 22.201172 15.472656 C 23.118521 14.25909 24.048491 13.149727 24.976562 12.138672 z M 25 17.416016 C 26.46323 17.416016 27.89109 17.476959 29.271484 17.585938 C 30.056222 18.736362 30.823632 19.947572 31.558594 21.220703 C 32.283275 22.476026 32.940111 23.729083 33.537109 24.966797 C 32.93231 26.223832 32.263831 27.49624 31.527344 28.771484 C 31.523552 28.777937 31.521219 28.782744 31.517578 28.789062 C 30.783614 30.059821 30.018098 31.26984 29.234375 32.417969 C 27.865338 32.525081 26.450283 32.583984 25 32.583984 C 23.514342 32.583984 22.064089 32.522402 20.664062 32.410156 C 19.886529 31.269031 19.126816 30.068368 18.398438 28.806641 C 17.665416 27.536871 17.000796 26.269329 16.398438 25.017578 C 17.002327 23.761435 17.668829 22.489253 18.404297 21.214844 C 18.404297 21.214844 18.40625 21.212891 18.40625 21.212891 C 18.39655 21.229171 18.393913 21.232819 18.414062 21.199219 L 18.417969 21.191406 L 18.421875 21.183594 C 19.148971 19.92461 19.907547 18.726683 20.683594 17.587891 C 22.077663 17.476642 23.521154 17.416016 25 17.416016 z M 31.847656 17.859375 C 33.341097 18.055329 34.752738 18.31343 36.072266 18.623047 C 35.665671 19.907982 35.177735 21.244321 34.597656 22.617188 C 34.184391 21.820544 33.753431 21.021717 33.291016 20.220703 C 32.821887 19.408108 32.338138 18.625961 31.847656 17.859375 z M 18.050781 17.873047 C 17.576437 18.616559 17.108604 19.375467 16.654297 20.162109 C 16.654297 20.162109 16.652344 20.164062 16.652344 20.164062 L 16.648438 20.169922 L 16.642578 20.177734 C 16.172365 20.99192 15.735882 21.803574 15.316406 22.613281 C 14.741624 21.24861 14.254756 19.920057 13.851562 18.642578 C 15.162627 18.332038 16.566099 18.071113 18.050781 17.873047 z M 38.050781 19.148438 C 38.801062 19.372369 39.524617 19.60709 40.185547 19.865234 C 42.0957 20.611296 43.60665 21.494743 44.585938 22.398438 C 45.565224 23.302132 45.990234 24.163946 45.990234 25 C 45.990234 25.836054 45.565225 26.697869 44.585938 27.601562 C 43.60665 28.505257 42.0957 29.388704 40.185547 30.134766 C 39.521171 30.394255 38.793695 30.630561 38.039062 30.855469 C 37.452864 28.981798 36.691812 27.020106 35.765625 25.011719 C 36.696504 22.996343 37.461712 21.028893 38.050781 19.148438 z M 11.914062 19.158203 C 12.495876 21.020111 13.250167 22.969318 14.167969 24.964844 C 13.236843 26.982272 12.473289 28.951917 11.884766 30.833984 C 11.157959 30.615374 10.456739 30.385627 9.8144531 30.134766 C 7.9042995 29.388704 6.39335 28.505257 5.4140625 27.601562 C 4.434775 26.697868 4.0097656 25.836054 4.0097656 25 C 4.0097656 24.163946 4.434775 23.302132 5.4140625 22.398438 C 6.39335 21.494743 7.9042995 20.611296 9.8144531 19.865234 C 10.4652 19.611068 11.176619 19.379236 11.914062 19.158203 z M 25 20 C 22.250484 20 20 22.250484 20 25 C 20 27.749516 22.250484 30 25 30 C 27.749516 30 30 27.749516 30 25 C 30 22.250484 27.749516 20 25 20 z M 25 22 C 26.668484 22 28 23.331516 28 25 C 28 26.668484 26.668484 28 25 28 C 23.331516 28 22 26.668484 22 25 C 22 23.331516 23.331516 22 25 22 z M 34.619141 27.359375 C 35.201814 28.73802 35.693798 30.07902 36.101562 31.369141 C 34.777717 31.680901 33.360853 31.941476 31.861328 32.138672 C 32.336807 31.39468 32.806274 30.6348 33.261719 29.847656 C 33.267219 29.838256 33.273837 29.831706 33.279297 29.822266 L 33.287109 29.810547 L 33.296875 29.792969 C 33.298875 29.789469 33.300734 29.786703 33.302734 29.783203 L 33.316406 29.755859 C 33.778061 28.955197 34.206463 28.15567 34.619141 27.359375 z M 15.337891 27.369141 C 15.757452 28.179485 16.195573 28.99172 16.666016 29.806641 C 17.127309 30.605711 17.601937 31.376251 18.083984 32.130859 C 16.591537 31.932828 15.180792 31.672936 13.863281 31.361328 C 14.269201 30.076519 14.758398 28.742086 15.337891 27.369141 z M 13.306641 33.306641 C 15.233399 33.768434 17.334823 34.117022 19.568359 34.333984 C 20.862868 36.167623 22.20167 37.827822 23.550781 39.289062 C 22.895654 39.927967 22.244631 40.526541 21.609375 41.042969 C 19.983836 42.364443 18.443972 43.262307 17.160156 43.677734 C 15.87634 44.093161 14.920502 44.035984 14.207031 43.623047 C 13.493312 43.210069 12.966552 42.407454 12.685547 41.085938 C 12.404542 39.76442 12.412951 37.979944 12.746094 35.910156 C 12.878457 35.087784 13.074834 34.209872 13.306641 33.306641 z M 36.658203 33.314453 C 36.891825 34.224225 37.089781 35.107495 37.222656 35.935547 C 37.554924 38.006167 37.563974 39.791437 37.28125 41.115234 C 36.99853 42.439032 36.466842 43.246597 35.746094 43.662109 C 35.746094 43.662109 35.744141 43.664062 35.744141 43.664062 C 35.744141 43.664062 35.742188 43.664062 35.742188 43.664062 C 35.021279 44.078849 34.055146 44.132769 32.767578 43.714844 C 31.479187 43.296577 29.937773 42.396347 28.310547 41.072266 C 27.676276 40.556157 27.026896 39.958161 26.373047 39.320312 C 27.730088 37.853131 29.076813 36.183931 30.378906 34.339844 C 32.618593 34.124566 34.725711 33.775728 36.658203 33.314453 z M 22.183594 34.525391 C 23.10854 34.570544 24.044054 34.601562 25 34.601562 C 25.919342 34.601562 26.820152 34.573053 27.710938 34.53125 C 26.796771 35.738242 25.87181 36.843787 24.947266 37.849609 C 24.022889 36.841555 23.097063 35.733913 22.183594 34.525391 z',
            background: '#000000',
            fill: '#25a1fa'
        },
        {
            item: 'Git',
            path: 'M 46.792969 22.089844 L 27.910156 3.207031 C 27.109375 2.402344 26.054688 2 25 2 C 23.945313 2 22.890625 2.402344 22.089844 3.207031 L 18.355469 6.941406 L 22.976563 11.5625 C 24.511719 10.660156 26.511719 10.855469 27.828125 12.171875 C 29.144531 13.488281 29.335938 15.488281 28.433594 17.019531 L 32.976563 21.5625 C 34.511719 20.660156 36.511719 20.855469 37.828125 22.171875 C 39.390625 23.734375 39.390625 26.265625 37.828125 27.828125 C 36.265625 29.390625 33.734375 29.390625 32.171875 27.828125 C 30.855469 26.511719 30.660156 24.511719 31.5625 22.976563 L 27.019531 18.433594 C 26.695313 18.625 26.355469 18.765625 26 18.855469 L 26 31.140625 C 27.722656 31.585938 29 33.136719 29 35 C 29 37.210938 27.210938 39 25 39 C 22.789063 39 21 37.210938 21 35 C 21 33.136719 22.277344 31.585938 24 31.140625 L 24 18.855469 C 23.332031 18.683594 22.695313 18.351563 22.171875 17.828125 C 20.855469 16.511719 20.664063 14.511719 21.566406 12.980469 L 16.941406 8.355469 L 3.207031 22.089844 C 1.597656 23.695313 1.597656 26.304688 3.207031 27.910156 L 22.089844 46.792969 C 22.890625 47.597656 23.945313 48 25 48 C 26.054688 48 27.109375 47.597656 27.910156 46.792969 L 46.792969 27.910156 C 48.402344 26.304688 48.402344 23.695313 46.792969 22.089844 Z',
            background: '#fff',
            fill: '#fa440c'
        },
        {
            item: 'Redux Toolkit',
            path: 'M 24 2 C 16.832 2 11 10.292328 11 20.486328 C 11 25.752514 12.564938 30.494647 15.060547 33.859375 A 3.5 3.5 0 0 0 18.5 38 A 3.5 3.5 0 1 0 18.5 31 A 3.5 3.5 0 0 0 17.931641 31.050781 C 16.143565 28.387233 15 24.611465 15 20.486328 C 15 12.633328 19.122 6 24 6 C 28.119 6 31.689125 10.7375 32.703125 16.9375 C 34.125125 17.3455 35.541688 17.897453 36.929688 18.564453 C 36.251687 9.2704531 30.712 2 24 2 z M 22.5 17 A 3.5 3.5 0 1 0 22.5 24 A 3.5 3.5 0 0 0 25.640625 22.041016 C 28.890379 21.837485 32.64609 22.840116 36.113281 24.917969 C 42.973281 29.030969 46.703812 36.223047 44.257812 40.623047 C 43.453812 42.069047 42.005359 43.108953 40.068359 43.626953 C 37.279359 44.372953 33.859234 43.993672 30.490234 42.638672 C 29.421234 43.632672 28.245891 44.565828 26.962891 45.423828 C 30.290891 47.104828 33.8105 47.996094 37.0625 47.996094 C 38.4725 47.996094 39.833516 47.830234 41.103516 47.490234 C 44.110516 46.685234 46.410906 44.982406 47.753906 42.566406 C 51.337906 36.117406 47.127922 26.858281 38.169922 21.488281 C 33.907448 18.931871 29.185543 17.753815 25.035156 18.09375 A 3.5 3.5 0 0 0 22.5 17 z M 9.1601562 23.324219 C 2.0791563 28.795219 -0.95795312 36.799406 2.2480469 42.566406 C 3.5910469 44.982406 5.8914375 46.685234 8.8984375 47.490234 C 10.169438 47.830234 11.527453 47.996094 12.939453 47.996094 C 16.739453 47.996094 20.910031 46.789672 24.707031 44.513672 C 28.954867 41.96696 32.09575 38.543722 33.876953 34.962891 C 35.628054 34.772138 37 33.301038 37 31.5 C 37 29.57 35.43 28 33.5 28 C 31.57 28 30 29.57 30 31.5 C 30 32.040225 30.132082 32.546629 30.351562 33.003906 C 28.907628 35.978686 26.213448 38.945387 22.650391 41.082031 C 18.354391 43.658031 13.599641 44.609953 9.9316406 43.626953 C 7.9956406 43.108953 6.5481406 42.069047 5.7441406 40.623047 C 3.8101406 37.143047 5.7462969 31.923469 10.029297 27.855469 C 9.6182969 26.415469 9.3241562 24.899219 9.1601562 23.324219 z',
            background: '#fff',
            fill: '#9771de'
        },
        {
            item: 'Tailwind CSS',
            path: 'M24,9.604c-6.4,0-10.4,3.199-12,9.597c2.4-3.199,5.2-4.398,8.4-3.599 c1.826,0.456,3.131,1.781,4.576,3.247C27.328,21.236,30.051,24,36,24c6.4,0,10.4-3.199,12-9.598c-2.4,3.199-5.2,4.399-8.4,3.6 c-1.825-0.456-3.13-1.781-4.575-3.247C32.672,12.367,29.948,9.604,24,9.604L24,9.604z M12,24c-6.4,0-10.4,3.199-12,9.598 c2.4-3.199,5.2-4.399,8.4-3.599c1.825,0.457,3.13,1.781,4.575,3.246c2.353,2.388,5.077,5.152,11.025,5.152 c6.4,0,10.4-3.199,12-9.598c-2.4,3.199-5.2,4.399-8.4,3.599c-1.826-0.456-3.131-1.781-4.576-3.246C20.672,26.764,17.949,24,12,24 L12,24z',
            background: '#000000',
            fill: '#69e8ff'
        },
        {
            item: t('section4.skill.english'),
            path: 'M239.15,212.42l-56-112a8,8,0,0,0-14.31,0l-21.71,43.43A88,88,0,0,1,100,126.93,103.65,103.65,0,0,0,127.69,64H152a8,8,0,0,0,0-16H96V32a8,8,0,0,0-16,0V48H24a8,8,0,0,0,0,16h87.63A87.76,87.76,0,0,1,88,116.35a87.74,87.74,0,0,1-19-31,8,8,0,1,0-15.08,5.34A103.63,103.63,0,0,0,76,127a87.55,87.55,0,0,1-52,17,8,8,0,0,0,0,16,103.46,103.46,0,0,0,64-22.08,104.18,104.18,0,0,0,51.44,21.31l-26.6,53.19a8,8,0,0,0,14.31,7.16L140.94,192h70.11l13.79,27.58A8,8,0,0,0,232,224a8,8,0,0,0,7.15-11.58ZM148.94,176,176,121.89,203.05,176Z',
            background: '#fff',
            fill: '#69e8ff'
        },
        {
            item: 'MySQL',
            path: 'M 31.167969 8 C 30.699219 7.988281 30.289063 8.167969 30.078125 8.6875 C 29.71875 9.558594 30.613281 10.410156 30.933594 10.855469 C 31.15625 11.164063 31.445313 11.511719 31.605469 11.859375 C 31.710938 12.089844 31.726563 12.320313 31.816406 12.5625 C 32.039063 13.160156 32.394531 13.839844 32.679688 14.394531 C 32.824219 14.675781 32.984375 14.96875 33.167969 15.21875 C 33.28125 15.371094 33.472656 15.441406 33.503906 15.675781 C 33.316406 15.941406 33.304688 16.351563 33.199219 16.6875 C 32.722656 18.191406 32.902344 20.0625 33.59375 21.171875 C 33.808594 21.515625 34.3125 22.246094 35 21.96875 C 35.601563 21.722656 35.46875 20.960938 35.640625 20.285156 C 35.679688 20.136719 35.65625 20.023438 35.734375 19.921875 L 35.734375 19.953125 C 35.914063 20.320313 36.097656 20.6875 36.28125 21.050781 C 36.691406 21.707031 37.414063 22.390625 38.023438 22.855469 C 38.339844 23.09375 38.589844 23.507813 39 23.648438 L 39 23.617188 L 38.96875 23.617188 C 38.890625 23.492188 38.765625 23.441406 38.664063 23.34375 C 38.425781 23.109375 38.160156 22.816406 37.964844 22.546875 C 37.40625 21.792969 36.914063 20.964844 36.46875 20.105469 C 36.253906 19.695313 36.066406 19.242188 35.886719 18.824219 C 35.816406 18.660156 35.816406 18.417969 35.671875 18.332031 C 35.472656 18.640625 35.183594 18.886719 35.03125 19.25 C 34.789063 19.828125 34.753906 20.535156 34.664063 21.265625 C 34.609375 21.285156 34.632813 21.269531 34.605469 21.296875 C 34.179688 21.191406 34.027344 20.753906 33.871094 20.378906 C 33.472656 19.429688 33.394531 17.898438 33.75 16.808594 C 33.839844 16.523438 34.25 15.632813 34.085938 15.371094 C 34.007813 15.109375 33.742188 14.960938 33.597656 14.761719 C 33.414063 14.515625 33.234375 14.191406 33.109375 13.90625 C 32.78125 13.164063 32.472656 12.304688 32.125 11.554688 C 31.960938 11.195313 31.683594 10.835938 31.453125 10.515625 C 31.199219 10.164063 30.917969 9.90625 30.71875 9.476563 C 30.652344 9.328125 30.554688 9.085938 30.660156 8.929688 C 30.691406 8.824219 30.738281 8.78125 30.84375 8.746094 C 31.019531 8.609375 31.511719 8.789063 31.699219 8.867188 C 32.1875 9.070313 32.597656 9.265625 33.011719 9.539063 C 33.210938 9.671875 33.410156 9.925781 33.652344 10 L 33.925781 10 C 34.359375 10.097656 34.839844 10.027344 35.238281 10.152344 C 35.949219 10.367188 36.585938 10.703125 37.160156 11.066406 C 38.921875 12.175781 40.363281 13.757813 41.34375 15.644531 C 41.503906 15.949219 41.574219 16.242188 41.714844 16.5625 C 41.992188 17.210938 42.347656 17.882813 42.628906 18.515625 C 42.90625 19.152344 43.179688 19.789063 43.574219 20.316406 C 43.78125 20.59375 44.585938 20.746094 44.949219 20.898438 C 45.203125 21.007813 45.625 21.121094 45.863281 21.265625 C 46.328125 21.542969 46.773438 21.875 47.207031 22.183594 C 47.425781 22.335938 48.089844 22.667969 48.125 22.945313 C 47.050781 22.917969 46.230469 23.015625 45.53125 23.3125 C 45.332031 23.398438 45.011719 23.398438 44.980469 23.648438 C 45.085938 23.761719 45.105469 23.933594 45.191406 24.074219 C 45.359375 24.34375 45.640625 24.707031 45.894531 24.898438 C 46.171875 25.105469 46.453125 25.328125 46.75 25.511719 C 47.273438 25.828125 47.859375 26.011719 48.367188 26.332031 C 48.664063 26.523438 48.964844 26.761719 49.253906 26.972656 C 49.398438 27.082031 49.492188 27.246094 49.679688 27.3125 L 49.679688 27.28125 C 49.582031 27.15625 49.558594 26.984375 49.46875 26.855469 L 49.066406 26.453125 C 48.679688 25.941406 48.1875 25.488281 47.664063 25.113281 C 47.246094 24.8125 46.3125 24.40625 46.140625 23.921875 L 46.109375 23.890625 C 46.402344 23.859375 46.75 23.75 47.023438 23.675781 C 47.484375 23.554688 47.890625 23.585938 48.363281 23.464844 C 48.578125 23.402344 48.792969 23.339844 49.007813 23.28125 L 49.007813 23.15625 C 48.769531 22.914063 48.597656 22.585938 48.335938 22.363281 C 47.652344 21.78125 46.90625 21.199219 46.136719 20.714844 C 45.710938 20.445313 45.183594 20.269531 44.734375 20.042969 C 44.582031 19.964844 44.316406 19.925781 44.214844 19.796875 C 43.976563 19.496094 43.847656 19.113281 43.664063 18.761719 C 43.28125 18.023438 42.90625 17.21875 42.566406 16.441406 C 42.335938 15.914063 42.183594 15.390625 41.894531 14.914063 C 40.507813 12.636719 39.015625 11.257813 36.703125 9.90625 C 36.210938 9.617188 35.621094 9.507813 34.996094 9.359375 C 34.65625 9.335938 34.324219 9.316406 33.984375 9.296875 C 33.78125 9.210938 33.566406 8.960938 33.375 8.835938 C 32.894531 8.535156 31.949219 8.011719 31.167969 8 Z M 34.476563 11.3125 C 34.253906 11.308594 34.09375 11.339844 33.925781 11.375 L 33.925781 11.40625 L 33.957031 11.40625 C 34.0625 11.625 34.253906 11.765625 34.386719 11.953125 C 34.488281 12.167969 34.585938 12.382813 34.6875 12.597656 L 34.71875 12.566406 C 34.90625 12.433594 34.996094 12.21875 34.996094 11.894531 C 34.917969 11.816406 34.90625 11.714844 34.84375 11.621094 C 34.753906 11.492188 34.585938 11.421875 34.476563 11.3125 Z M 1.867188 23.996094 C 1.566406 24.007813 1.238281 24.066406 0.882813 24.179688 C 0.289063 24.359375 -0.00390625 24.714844 -0.00390625 25.4375 L -0.00390625 33 L 2 33 L 2 25.621094 L 4.777344 31.929688 C 5.121094 32.714844 5.589844 32.996094 6.507813 32.996094 C 7.429688 32.996094 7.878906 32.714844 8.222656 31.929688 L 11 25.78125 L 11 33 L 13 33 L 13 25.4375 C 13 24.714844 12.710938 24.359375 12.113281 24.179688 C 10.691406 23.730469 9.734375 24.117188 9.304688 25.089844 L 6.453125 31.503906 L 3.695313 25.089844 C 3.382813 24.359375 2.757813 23.960938 1.867188 23.996094 Z M 26.246094 24 C 25.457031 24 23 24.09375 23 26 L 23 27.234375 C 23 28.109375 23.769531 28.824219 25.4375 29 C 25.625 29.011719 25.8125 29.027344 26 29.027344 C 26 29.027344 27.945313 28.988281 28 29 C 29.125 29 29 29.875 29 30 L 29 31 C 29 31.136719 28.96875 32 27.988281 32 L 23 32 L 23 33 L 28.007813 33 C 28.664063 33 29.300781 32.863281 29.808594 32.625 C 30.652344 32.238281 31 31.714844 31 31.027344 L 31 29.597656 C 31 28.0625 29.09375 28 28 28 L 26 28 C 25.214844 28 25.09375 27.523438 25 27 L 25 26 C 25.09375 25.601563 25.269531 25.0625 25.964844 25 L 31 25 L 31 24 Z M 33.980469 24 C 32.503906 24.203125 31.984375 24.9375 31.984375 26 L 31.984375 31 C 31.984375 31.972656 32.527344 32.558594 33.644531 32.863281 C 34.019531 32.96875 34.359375 33.011719 34.679688 33.011719 L 36.90625 33 L 38.214844 33 L 39.328125 34 L 41.578125 34 L 40.03125 32.605469 C 40.757813 32.304688 40.984375 31.84375 40.984375 30.980469 L 40.984375 26 C 40.984375 24.9375 40.292969 24.203125 38.816406 24 Z M 42 24 L 42 30.957031 C 42 32.164063 42.683594 32.84375 44.492188 32.980469 C 44.660156 32.988281 44.832031 33 45 33 L 50 33 L 50 32 L 45.378906 32 C 44.347656 32 44 31.566406 44 30.949219 L 44 24 Z M 35.171875 25 L 37.746094 25 C 38.425781 25 38.882813 25.546875 38.984375 26 C 38.984375 26 39 30.65625 39 31 C 39 31.34375 38.808594 31.5 38.808594 31.5 L 38.265625 31 L 36 31 L 37.113281 32 L 35.171875 32 C 34.476563 32 34.085938 31.484375 33.984375 31 L 33.984375 26.101563 C 33.984375 25.570313 34.390625 25 35.171875 25 Z M 14 27 C 14.039063 27.039063 14 31.261719 14 31.34375 C 14.015625 32.21875 15.125 32.984375 16.863281 33 L 20 33 L 20 33.066406 C 20 33.253906 20.136719 33.878906 19 34 C 18.988281 34 14.011719 34 14 34 L 14 35 L 19.214844 35 C 20.097656 34.972656 22.011719 34.773438 22 33.242188 C 22 33.214844 22.007813 27 22 27 L 20 27 L 20 32 C 19.96875 32 17.523438 32.007813 17.03125 32 C 16.066406 31.984375 15.984375 31.433594 16 31.222656 L 16 27 Z',
            background: '#fff',
            fill: '#000000'
        },
    ]

    const subData = [
        {
            item: ' C, C++ (Basic, OOP), C# (Basic, Windows Application, ASP.NET), PHP (Basic), Java (Basic, OOP, J2EE)',
            path: <DevToLogo size={window.innerWidth < 1080 ? 24 : 28} color="#fa730c" />,
            background: '#000000'
        },
        {
            item: t('section4.skill.test'),
            path: <Wrench size={window.innerWidth < 1080 ? 24 : 28} color="#ff0d05" />,
            background: '#fff'
        },
        {
            item: 'Postman, Jira, Bitbucket, Github,...',
            path: <CompassTool size={window.innerWidth < 1080 ? 24 : 28} color="#68eef7" />,
            background: '#000000'
        },
        {
            item: 'NodeJS, ExpressJS',
            path: <Nut size={window.innerWidth < 1080 ? 24 : 28} color="#43fa43" />,
            background: '#fff'
        }
    ]

    const softData = [
        {
            item: t('section4.skill.team'),
            path: <MicrosoftTeamsLogo size={window.innerWidth < 1080 ? 24 : 28} color="#9943fa" />,
            background: '#fff'
        },
        {
            item: t('section4.skill.leader'),
            path: <Crown size={window.innerWidth < 1080 ? 24 : 28} color="#fcff38" />,
            background: '#000000'
        },
        {
            item: t('section4.skill.listen'),
            path: <ChatsCircle size={window.innerWidth < 1080 ? 24 : 28} color="#25ab00" />,
            background: '#cccccc'
        },
        {
            item: t('section4.skill.adapt'),
            path: <Barbell size={window.innerWidth < 1080 ? 24 : 28} color="#00238c" />,
            background: '#c2d1ff'
        }
    ]
    return (
        <>
            <div id="skill" style={{ width: '100%', height: '100vh', paddingTop: window.innerWidth < 1000 ? 128 : 0 }}>
                {window.innerWidth < 1000 ? (
                    <Row gutter={[16, 24]}>
                        <Col span={24}>
                            <div className={`${animate.animate1 ? "mobileActive1Section4" : "mobileNotActive1Section4"}`} style={{ width: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', gap: 48, transition: 'all 1s ease-in-out' }}>
                                <Typography.Title level={window.innerWidth < 1080 ? 2 : 1} style={{ margin: 0, color: '#e6f4ff' }}>
                                    {t('section4.mainSkill')}

                                </Typography.Title>
                                <div style={{ width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: window.innerWidth < 500 ? 24 : 48 }}>
                                    {data.map((item, idx) => idx <= 4 && (
                                        <div>
                                            <Tooltip color="rgba(156, 156, 156, 0.466)" title={item.item}>

                                                <button className="Btn">
                                                    <span className="svgContainer">
                                                        <svg xmlns="http://www.w3.org/2000/svg" fill={item.fill} x="0px" y="0px" viewBox="0 0 50 50" width={window.innerWidth < 1080 ? "2.2em" : "3em"} height={window.innerWidth < 1080 ? "2.2em" : "3em"}>
                                                            <path fillRule="evenodd" d={item.path}></path>
                                                        </svg>
                                                    </span>
                                                    <span className="BG" style={{ background: `${item.background}` }}></span>
                                                </button>
                                            </Tooltip>
                                        </div>
                                    ))}

                                </div>
                                <div style={{ width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: window.innerWidth < 500 ? 24 : 32 }}>
                                    {data.map((item, idx) => idx > 4 && (
                                        <div>
                                            <Tooltip color="rgba(156, 156, 156, 0.466)" title={item.item}>

                                                <button className="Btn">
                                                    <span className="svgContainer">
                                                        <svg xmlns="http://www.w3.org/2000/svg" fill={item.fill} x="0px" y="0px" viewBox="0 0 50 50" width={window.innerWidth < 1080 ? "2.2em" : "3em"} height={window.innerWidth < 1080 ? "2.2em" : "3em"}>
                                                            <path fillRule="evenodd" d={item.path}></path>
                                                        </svg>
                                                    </span>
                                                    <span className="BG" style={{ background: `${item.background}` }}></span>
                                                </button>
                                            </Tooltip>
                                        </div>
                                    ))}

                                </div>
                            </div>
                        </Col>
                        <Col span={24}>
                            <div style={{ width: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', gap: 32 }}>
                                <div className={`${animate.animate2 ? "mobileActive2Section4" : "mobileNotActive2Section4"}`} style={{ width: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', gap: 44, transition: 'all 1s ease-in-out' }}>
                                    <Typography.Title level={3} style={{ margin: 0, color: '#e6f4ff' }}>
                                        {t('section4.otherSkill')}
                                    </Typography.Title>
                                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: 32 }}>
                                        {subData.map((item) => (
                                            <div>
                                                <Tooltip color="rgba(156, 156, 156, 0.8)" title={item.item}>
                                                    <button className="Btn">
                                                        <span className="svgContainer">
                                                            {item.path}
                                                        </span>
                                                        <span className="BG" style={{ background: `${item.background}` }}></span>
                                                    </button>
                                                </Tooltip>
                                            </div>
                                        ))}

                                    </div>

                                </div>
                                <div className={`${animate.animate3 ? "mobileActive3Section4" : "mobileNotActive3Section4"}`} style={{ width: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', gap: 44, transition: 'all 1s ease-in-out' }}>
                                    <Typography.Title level={3} style={{ margin: 0, color: '#e6f4ff' }}>
                                        {t('section4.softSkill')}
                                    </Typography.Title>
                                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: 32 }}>
                                        {softData.map((item) => (
                                            <div>
                                                <Tooltip color="rgba(156, 156, 156, 0.8)" title={item.item}>
                                                    <button className="Btn">
                                                        <span className="svgContainer">
                                                            {item.path}
                                                        </span>
                                                        <span className="BG" style={{ background: `${item.background}` }}></span>
                                                    </button>
                                                </Tooltip>
                                            </div>
                                        ))}

                                    </div>

                                </div>
                            </div>

                        </Col>
                    </Row>
                ) : (
                    <Row>
                        <Col span={12}>
                            <div className={`${animate.animate1 ? "active1Section4" : "notActive1Section4"}`} style={{ width: '100%', height: '100vh', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', gap: 64, transition: 'all 1s ease-in-out' }}>
                                <Typography.Title level={window.innerWidth < 1080 ? 2 : 1} style={{ margin: 0, color: '#e6f4ff' }}>
                                    {t('section4.mainSkill')}

                                </Typography.Title>
                                <div style={{ width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: 48 }}>
                                    {data.map((item, idx) => idx <= 4 && (
                                        <div>
                                            <Tooltip color="rgba(156, 156, 156, 0.466)" title={item.item}>

                                                <button className="Btn">
                                                    <span className="svgContainer">
                                                        <svg xmlns="http://www.w3.org/2000/svg" fill={item.fill} x="0px" y="0px" viewBox="0 0 50 50" width={window.innerWidth < 1080 ? "2.2em" : "3em"} height={window.innerWidth < 1080 ? "2.2em" : "3em"}>
                                                            <path fillRule="evenodd" d={item.path}></path>
                                                        </svg>
                                                    </span>
                                                    <span className="BG" style={{ background: `${item.background}` }}></span>
                                                </button>
                                            </Tooltip>
                                        </div>
                                    ))}

                                </div>
                                <div style={{ width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: 48 }}>
                                    {data.map((item, idx) => idx > 4 && (
                                        <div>
                                            <Tooltip color="rgba(156, 156, 156, 0.466)" title={item.item}>

                                                <button className="Btn">
                                                    <span className="svgContainer">
                                                        <svg xmlns="http://www.w3.org/2000/svg" fill={item.fill} x="0px" y="0px" viewBox="0 0 50 50" width={window.innerWidth < 1080 ? "2.2em" : "3em"} height={window.innerWidth < 1080 ? "2.2em" : "3em"}>
                                                            <path fillRule="evenodd" d={item.path}></path>
                                                        </svg>
                                                    </span>
                                                    <span className="BG" style={{ background: `${item.background}` }}></span>
                                                </button>
                                            </Tooltip>
                                        </div>
                                    ))}

                                </div>
                            </div>
                        </Col>
                        <Col span={12}>
                            <div style={{ width: '100%', height: '100vh', display: 'flex', flexDirection: 'column', justifyContent: 'center', gap: 32 }}>
                                <div className={`${animate.animate2 ? "active2Section4" : "notActive2Section4"}`} style={{ width: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', gap: 44, transition: 'all 1s ease-in-out' }}>
                                    <Typography.Title level={3} style={{ margin: 0, color: '#e6f4ff' }}>
                                        {t('section4.otherSkill')}
                                    </Typography.Title>
                                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: 32 }}>
                                        {subData.map((item) => (
                                            <div>
                                                <Tooltip color="rgba(156, 156, 156, 0.8)" title={item.item}>
                                                    <button className="Btn">
                                                        <span className="svgContainer">
                                                            {item.path}
                                                        </span>
                                                        <span className="BG" style={{ background: `${item.background}` }}></span>
                                                    </button>
                                                </Tooltip>
                                            </div>
                                        ))}

                                    </div>

                                </div>
                                <div className={`${animate.animate3 ? "active3Section4" : "notActive3Section4"}`} style={{ width: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', gap: 44, transition: 'all 1s ease-in-out' }}>
                                    <Typography.Title level={3} style={{ margin: 0, color: '#e6f4ff' }}>
                                        {t('section4.softSkill')}
                                    </Typography.Title>
                                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', gap: 32 }}>
                                        {softData.map((item) => (
                                            <div>
                                                <Tooltip color="rgba(156, 156, 156, 0.8)" title={item.item}>
                                                    <button className="Btn">
                                                        <span className="svgContainer">
                                                            {item.path}
                                                        </span>
                                                        <span className="BG" style={{ background: `${item.background}` }}></span>
                                                    </button>
                                                </Tooltip>
                                            </div>
                                        ))}

                                    </div>

                                </div>
                            </div>

                        </Col>
                    </Row>
                )}

            </div>
        </>
    )
}

export default Section4